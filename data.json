[
  {
    "start_date": "2020-09-01",
    "short_description": "The webportfolio you're currently on.",
    "course_name": "Project: Own computer environment",
    "long_description": "A web-based portfolio where the backend is created using python as server-side language (API), flask framework, Jinja2 template language and JSON for database. The frontend created using HTML, CSS and bootstrap. The purpose of this webportfolio is to present projects that are made during the Innovative programming program at Link√∂ping University. There is also projects presented that are made in my spare time. While working on this project I learned about HTTP, REST-API, docker and kubernetes and basic website design.",
    "group_size": 2,
    "academic_credits": "6hp",
    "lulz_had": "",
    "external_link": "https://github.com/kani95/TDP003---Webportfolio",
    "small_image": "/static/images/webportshort.png",
    "techniques_used": [
      "Python",
      "Latex",
      "Git",
      "Jinja2",
      "Flask",
      "HTML",
      "CSS",
      "Bootstrap",
      "JSON",
      "JQuery"
    ],
    "project_name": "Webportfolio",
    "course_id": "TDP003",
    "end_date": "2020-10-22",
    "project_id": 6,
    "big_image": "/static/images/webportlong.png"
  },
  {
    "start_date": "2020-12-02",
    "short_description": "2D object-oriented game inspired from space invaders.",
    "course_name": "Project: Object-oriented system",
    "long_description": "A 2D space invaders inspired game that lets you take control of a ladybug using the arrow keys and spacebar to fire your projectiles. The ladybug was in the middle of it's summer vacation when she is met by horrifying unknown bugs of various types that makes it clear that you are their next meal. Your goal is to eliminate these bugs while dodging acidic projectiles and camouflaged spiders. For each bug you defeat you gather points. The faster you do this the more points will be rewarded. Compare your best score through a leaderboard and challenge your friends. Can you survive the bug invasion? While working on this project I have gain knowledge of object-oriented programming and principles using C++. The focus of this project was working with classdesign, inheritance, polymorphism and pointers. We had to design our own game engine and state stack to change between the different states of the game. The development environment we used was mainly cmake, make, clion, sfml and basic game design in general. The experience has been very educational to be a part of a project through the entire development cycle, by writing our own requirements- and designspecification, and soon after realize the design in code and all this on a tight deadline. To learn more about the project or take a look at the source code, click the stats tab above for the link to the gitlab repository.",
    "group_size": 2,
    "academic_credits": "6hp",
    "lulz_had": "",
    "external_link": "https://github.com/kani95/TDP005---Bug-invasion",
    "small_image": "/static/images/ladybug2.png",
    "techniques_used": [
      "C++",
      "Latex",
      "Git",
      "Cmake",
      "Sfml"
    ],
    "project_name": "Bug Invasion",
    "course_id": "TDP005",
    "end_date": "2020-12-18",
    "project_id": 2,
    "big_image": "/static/images/ladybug1.png"
  },
  {
    "start_date": "2021-02-01",
    "short_description": "Imperative programming language with functional syntax",
    "course_name": "Computer language construction",
    "long_description": "Dopo is an imperative programming language with functional syntax. Dopo allows users to create basic datatypes such as integers, floats, booleans and strings, aswell as more complicated datatypes such as hashmaps and arrays. Dopo supports statements for selection, repetition and mathematical arithmetic. There is a inbuilt standard-library with functions meant for the string- and list-datatype. Dopo is using a recursive descent parser for its lexing and parsing stage. After that process is complete there will be a tree of nodes representing the constructs the user has typed throughout the code. Each construct is its own class and will after be executed individually until it reaches the top of the tree. Dopo is programmed using object-oriented principles in the programming language Ruby and tested with unittest framework.",
    "group_size": 2,
    "academic_credits": "10hp",
    "lulz_had": "",
    "external_link": "https://gitlab.liu.se/kasni325/dopo-version-1.0",
    "small_image": "/static/images/dopo_small.png",
    "techniques_used": [
      "Ruby",
      "RDParse"
    ],
    "project_name": "Dopo",
    "course_id": "TDP019",
    "end_date": "2021-05-20",
    "project_id": 4,
    "big_image": "/static/images/dopo_large.png"
  },
  {
    "start_date": "2021-09-12",
    "short_description": "The Android app Konkarong allows users to post listings about missing items. It can be about a person, a pet or any object. Other users can then take a look at these listings to keep an extra eye on them in their daily lives and can then contact the listing owner if they should be identified.",
    "course_name": "Project: Entrepreneurial programming",
    "long_description": "The purpose of the Konkarong app is for a user to be able to post listings about something that has disappeared or stolen. It could be a person, a pet, a bicycle and so on. Each listing contains information on the following aspects: 1-3 images, a title,  a description, an upload date, an end date,  which address the advertised last was seen picked using google maps, which category the listing belongs to and contact information for the owner of the ad (email, phone number or both). Each user has an account linked to it which can be created via email and password, Google sign in or Facebook login. An account is required to be able to use the app's functionality. After a user has logged in it can then put up listings (max 20), search for listings and favorite the ones he/she wants to store (max 20). The user can see a list of their own posted listings as well as those they have favorite marked. After successfully placing the listing, the owner can choose to edit it with a new one information and then re-upload it or delete it in its entirety. There is also a profile page where only the user has access to information about profile picture, number of listings posted, number of favorite tagged listings and when the account was created. There is also the opportunity for users to contact those responsible in creating Konkarong via a link to email apps to give someone form of help desk support. The search takes place via free text where the user can specify the category and city and sort by the number of favorite markings, newest listings first or oldest first. After a search, relevant listings will appear presented in the form of smaller clickable cards that redirect the user to a page that gets complete information about the listings. The idea is that if a user identifies an advertised item can choose to contact the listing owner by phone or email depending on the listing owner's chosen contact information. Konkarong then provides an opportunity for users to spread the word about the lost as well Konkarong is thus aimed at people who want to contribute with more solidarity in everyday life.",
    "group_size": 1,
    "academic_credits": "10hp",
    "lulz_had": "",
    "external_link": "https://gitlab.liu.se/kasni325/tdp028",
    "small_image": "/static/images/tdp028_logo.png",
    "techniques_used": [
      "Java",
      "Firebase",
      "XML",
      "Android studio"
    ],
    "project_name": "Konkarong",
    "course_id": "TDP028",
    "end_date": "2022-01-10",
    "project_id": 5,
    "big_image": "/static/images/konkarong.jpg"
  },
  {
    "start_date": "2021-09-27",
    "short_description": "A simple social media webb-application that allows users to register, log in and write messages to friends on their profile page",
    "course_name": "Web-programming and interactivity",
    "long_description": "Webb-based social media application where the user can create an account, search amongst users, send fried request and when accepted write messages on their profile page. Created with nodeJS and express on client- and serverside with database being mongoDB. Mocha and chai being used to write unittest",
    "group_size": 2,
    "academic_credits": "6hp",
    "lulz_had": "",
    "external_link": "https://gitlab.liu.se/kasni325/tdp013/-/tree/master/project",
    "small_image": "/static/images/small_tdp013.png",
    "techniques_used": [
      "Html",
      "Css",
      "Bootstrap",
      "Javascript",
      "NodeJS",
      "React",
      "Mongodb",
      "Mocha",
      "Chai"
    ],
    "project_name": "Webster",
    "course_id": "TDP013",
    "end_date": "2021-10-15",
    "project_id": 7,
    "big_image": "/static/images/large_tdp013.png"
  },
  {
    "start_date": "2021-11-03",
    "short_description": "A simple chat application that allows two users to connect by ip-address and port number and send messages.",
    "course_name": "Programming in C# and .NET Framework",
    "long_description": "Webb-based chat-application where the user type in ip-address and port number and sends a invitation to another user. If the user accept then the two will be able to chat with each other. The chat history is then saved locally using a pseudo-database structured in XML nodes. Created using C# and .NET framwork with focus on WPF and notifyOnProperyChanged to update individual components in the application.",
    "group_size": 2,
    "academic_credits": "4hp",
    "lulz_had": "",
    "external_link": "https://gitlab.liu.se/alibe500/tddd49",
    "small_image": "/static/images/tddd49_small.png",
    "techniques_used": [
      "C#",
      "XAML",
      "WPF",
      "XML",
      "JSON",
      ".NET"
    ],
    "project_name": "Chatter",
    "course_id": "TDDD49",
    "end_date": "2021-12-17",
    "project_id": 8,
    "big_image": "/static/images/large_tddd49.png"
  },
  {
    "start_date": "2022-01-18",
    "short_description": "Startup for a webb-application for members of a swedish organisation to trade services and items through own currency. Because of rights I cant disclose of which organisation this is and unfortunately cant provide git-repo link. But I would be happy to discuss in person more about the project inline with the agreement.",
    "course_name": "Project: Agile System Development.",
    "long_description": "Using SCRUM as development method to ensure close relation with client. Cooperated with another team of developers in England that had provided a CC-node with API when handle transcations with their currency. The webb-appliction contains a backend with NodeJs, Mongodb, passport (for authentication) and frontend with Vue 3.",
    "group_size": 6,
    "academic_credits": "10hp",
    "lulz_had": "",
    "external_link": "",
    "small_image": "/static/images/web.png",
    "techniques_used": [
      "NodeJS",
      "Vue3",
      "Git",
      "Mongodb",
      "HTML",
      "CSS",
      "Passport",
      "PHP"
    ],
    "project_name": "Barter Webbsite",
    "course_id": "TDP032",
    "end_date": "2022-05-31",
    "project_id": 9,
    "big_image": "/static/images/web.png"
  },
  {
    "start_date": "2022-09-04",
    "short_description": "The goal was to redesign a MRP-algorithm that was currently a monolithic architecture to less separated microservices. We work based on an agile method and are on site at the company. I can't provide link to git-repo since I don't have the rights to the code anymore. But can ofcourse discuss this more in person inline with the agreement.",
    "course_name": "Company Project",
    "long_description": "Mrp is a algorithm to keep track of inventory and create order plans to make sure that it always on hand when needed. We utilized the agile-approach with close relation with the customer. The work required a redesign of current implementation and realisation using their standard for creating microservices which is using Java and relating frameworks/libraries.",
    "group_size": 7,
    "academic_credits": "10hp",
    "lulz_had": "",
    "external_link": "",
    "small_image": "/static/images/mrp_small.png",
    "techniques_used": [
      "Java",
      "Kubernetes",
      "PostGresSQL",
      "JPA",
      "Mockito",
      "SpringBoot"
    ],
    "project_name": "Mrp-algorithm to microservices.",
    "course_id": "TDP017",
    "end_date": "2022-12-12",
    "project_id": 10,
    "big_image": "/static/images/mrp_big.png"
  },
  {
    "start_date": "2022-09-05",
    "short_description": "Created a small bank system in seperated microservices. The system contains microservices for the bank operations, the customer information and the bank information.",
    "course_name": "Enterprise systems",
    "long_description": "Creating a small banking system using microservices in primary Java development technologies. A big focus was to explore diffent web-development frameworks aswell, the person-api is in django and the bank-api in ruby on rails. Using kafka as a central log-tool to log transactions/debits and error messages between each microservice.",
    "group_size": 2,
    "academic_credits": "6hp",
    "lulz_had": "",
    "external_link": "https://gitlab.liu.se/kasni325/tdp024/-/tree/main/lab_3",
    "small_image": "/static/images/bank_small.png",
    "techniques_used": [
      "Java",
      "Kafka",
      "SpringBoot",
      "JPA",
      "Python",
      "Django",
      "Ruby",
      "Ruby On Rails"
    ],
    "project_name": "Banking system in Microservices",
    "course_id": "TDP024",
    "end_date": "2022-10-10",
    "project_id": 11,
    "big_image": "/static/images/bank_small.png"
  }

]